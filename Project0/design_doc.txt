################
YOUR INFO
################
Name1:alex irion
EID1:aji272
CS login:alex10
Email:alexirion10@gmail.com
Unique Number:50745

Slip days used:0

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1:Katherine Heyne
EID1:kfh293
CS login:kfh293
Email:katherine.heyne@yahoo.com
Unique Number:50745

Your partner's ranking (scale below):

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.


(2) In part 0.3, which flavor of exec did you choose to use?  Why?
execve();
We used execve because...

################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?



(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

last 5 assembly instructions are(very last instruction indicated by "=>"):

   0x0000000000400a58 <+107>:   callq  0x4007b0 <exit@plt>
   0x0000000000400a5d <+112>:   mov    $0x1,%edi
   0x0000000000400a62 <+117>:   callq  0x4007b0 <exit@plt>
   0x0000000000400a67 <+122>:   leaveq 
=> 0x0000000000400a68 <+123>:   retq   



(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

Next instruction indicated by "=>"

Dump of assembler code for function __nanosleep_nocancel:
   0x00007ffff7ad5f19 <+0>:     mov    $0x23,%eax
   0x00007ffff7ad5f1e <+5>:     syscall 
=> 0x00007ffff7ad5f20 <+7>:     cmp    $0xfffffffffffff001,%rax
   0x00007ffff7ad5f26 <+13>:    jae    0x7ffff7ad5f59 <nanosleep+73>


(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

The register values are stored in the mode switch
Could also be pushed onto the stack before the funciton call is made.  They can then be popped off the stack to restore the values into the register


################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

The design advantage in using seperate signal handlers is code readability.  The program was much easier to debug and understand which function wasn't working correctly based on which signal was being sent.  The system may take slightly longer to recognize which function should be called as a result of a signal being sent, relative to the time it takes to call a single signal handler to catch all 3 signals.  

